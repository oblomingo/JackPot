//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace SilverlightJackPot.JackPotService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JackPotService.JackPotServiceSoap")]
    public interface JackPotServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IsWinningCode", ReplyAction="*")]
        System.IAsyncResult BeginIsWinningCode(SilverlightJackPot.JackPotService.IsWinningCodeRequest request, System.AsyncCallback callback, object asyncState);
        
        SilverlightJackPot.JackPotService.IsWinningCodeResponse EndIsWinningCode(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class IsWinningCodeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="IsWinningCode", Namespace="http://tempuri.org/", Order=0)]
        public SilverlightJackPot.JackPotService.IsWinningCodeRequestBody Body;
        
        public IsWinningCodeRequest() {
        }
        
        public IsWinningCodeRequest(SilverlightJackPot.JackPotService.IsWinningCodeRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class IsWinningCodeRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string code;
        
        public IsWinningCodeRequestBody() {
        }
        
        public IsWinningCodeRequestBody(string code) {
            this.code = code;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class IsWinningCodeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="IsWinningCodeResponse", Namespace="http://tempuri.org/", Order=0)]
        public SilverlightJackPot.JackPotService.IsWinningCodeResponseBody Body;
        
        public IsWinningCodeResponse() {
        }
        
        public IsWinningCodeResponse(SilverlightJackPot.JackPotService.IsWinningCodeResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class IsWinningCodeResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool IsWinningCodeResult;
        
        public IsWinningCodeResponseBody() {
        }
        
        public IsWinningCodeResponseBody(bool IsWinningCodeResult) {
            this.IsWinningCodeResult = IsWinningCodeResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface JackPotServiceSoapChannel : SilverlightJackPot.JackPotService.JackPotServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsWinningCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsWinningCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JackPotServiceSoapClient : System.ServiceModel.ClientBase<SilverlightJackPot.JackPotService.JackPotServiceSoap>, SilverlightJackPot.JackPotService.JackPotServiceSoap {
        
        private BeginOperationDelegate onBeginIsWinningCodeDelegate;
        
        private EndOperationDelegate onEndIsWinningCodeDelegate;
        
        private System.Threading.SendOrPostCallback onIsWinningCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public JackPotServiceSoapClient() {
        }
        
        public JackPotServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JackPotServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JackPotServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JackPotServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<IsWinningCodeCompletedEventArgs> IsWinningCodeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightJackPot.JackPotService.JackPotServiceSoap.BeginIsWinningCode(SilverlightJackPot.JackPotService.IsWinningCodeRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsWinningCode(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginIsWinningCode(string code, System.AsyncCallback callback, object asyncState) {
            SilverlightJackPot.JackPotService.IsWinningCodeRequest inValue = new SilverlightJackPot.JackPotService.IsWinningCodeRequest();
            inValue.Body = new SilverlightJackPot.JackPotService.IsWinningCodeRequestBody();
            inValue.Body.code = code;
            return ((SilverlightJackPot.JackPotService.JackPotServiceSoap)(this)).BeginIsWinningCode(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightJackPot.JackPotService.IsWinningCodeResponse SilverlightJackPot.JackPotService.JackPotServiceSoap.EndIsWinningCode(System.IAsyncResult result) {
            return base.Channel.EndIsWinningCode(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private bool EndIsWinningCode(System.IAsyncResult result) {
            SilverlightJackPot.JackPotService.IsWinningCodeResponse retVal = ((SilverlightJackPot.JackPotService.JackPotServiceSoap)(this)).EndIsWinningCode(result);
            return retVal.Body.IsWinningCodeResult;
        }
        
        private System.IAsyncResult OnBeginIsWinningCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string code = ((string)(inValues[0]));
            return this.BeginIsWinningCode(code, callback, asyncState);
        }
        
        private object[] OnEndIsWinningCode(System.IAsyncResult result) {
            bool retVal = this.EndIsWinningCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsWinningCodeCompleted(object state) {
            if ((this.IsWinningCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsWinningCodeCompleted(this, new IsWinningCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsWinningCodeAsync(string code) {
            this.IsWinningCodeAsync(code, null);
        }
        
        public void IsWinningCodeAsync(string code, object userState) {
            if ((this.onBeginIsWinningCodeDelegate == null)) {
                this.onBeginIsWinningCodeDelegate = new BeginOperationDelegate(this.OnBeginIsWinningCode);
            }
            if ((this.onEndIsWinningCodeDelegate == null)) {
                this.onEndIsWinningCodeDelegate = new EndOperationDelegate(this.OnEndIsWinningCode);
            }
            if ((this.onIsWinningCodeCompletedDelegate == null)) {
                this.onIsWinningCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsWinningCodeCompleted);
            }
            base.InvokeAsync(this.onBeginIsWinningCodeDelegate, new object[] {
                        code}, this.onEndIsWinningCodeDelegate, this.onIsWinningCodeCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightJackPot.JackPotService.JackPotServiceSoap CreateChannel() {
            return new JackPotServiceSoapClientChannel(this);
        }
        
        private class JackPotServiceSoapClientChannel : ChannelBase<SilverlightJackPot.JackPotService.JackPotServiceSoap>, SilverlightJackPot.JackPotService.JackPotServiceSoap {
            
            public JackPotServiceSoapClientChannel(System.ServiceModel.ClientBase<SilverlightJackPot.JackPotService.JackPotServiceSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginIsWinningCode(SilverlightJackPot.JackPotService.IsWinningCodeRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("IsWinningCode", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightJackPot.JackPotService.IsWinningCodeResponse EndIsWinningCode(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightJackPot.JackPotService.IsWinningCodeResponse _result = ((SilverlightJackPot.JackPotService.IsWinningCodeResponse)(base.EndInvoke("IsWinningCode", _args, result)));
                return _result;
            }
        }
    }
}
